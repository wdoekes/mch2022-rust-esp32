#[repr(u8)]
#[derive(Copy, Clone, Debug)]
pub enum Rp2040Reg {
    FwVer = 0,
    GpioDir,
    GpioIn,
    GpioOut,
    LcdBacklight,
    Fpga,
    Input1,
    Input2,
    Interrupt1,
    Interrupt2,
    AdcTrigger,
    AdcValueVusbLo,
    AdcValueVusbHi,
    AdcValueVbatLo,
    AdcValueVbatHi,
    Usb,
    BlTrigger,
    WebusbMode,
    CrashDebug,
    ResetLock,
    ResetAttempted,
    ChargingState,
    AdcValueTempLo,
    AdcValueTempHi,
    Uid0, // unique board identifier of the rp2040
    Uid1,
    Uid2,
    Uid3,
    Uid4,
    Uid5,
    Uid6,
    Uid7,
    Scratch0,  // used by the esp32 to store boot parameters, can also be read and written to from webusb
    Scratch1,
    Scratch2,
    Scratch3,
    Scratch4,
    Scratch5,
    Scratch6,
    Scratch7,
    Scratch8,
    Scratch9,
    Scratch10,
    Scratch11,
    Scratch12,
    Scratch13,
    Scratch14,
    Scratch15,
    Scratch16,
    Scratch17,
    Scratch18,
    Scratch19,
    Scratch20,
    Scratch21,
    Scratch22,
    Scratch23,
    Scratch24,
    Scratch25,
    Scratch26,
    Scratch27,
    Scratch28,
    Scratch29,
    Scratch30,
    Scratch31,
    Scratch32,
    Scratch33,
    Scratch34,
    Scratch35,
    Scratch36,
    Scratch37,
    Scratch38,
    Scratch39,
    Scratch40,
    Scratch41,
    Scratch42,
    Scratch43,
    Scratch44,
    Scratch45,
    Scratch46,
    Scratch47,
    Scratch48,
    Scratch49,
    Scratch50,
    Scratch51,
    Scratch52,
    Scratch53,
    Scratch54,
    Scratch55,
    Scratch56,
    Scratch57,
    Scratch58,
    Scratch59,
    Scratch60,
    Scratch61,
    Scratch62,
    Scratch63,
    IrAddressLo,
    IrAddressHi,
    IrCommand,
    IrTrigger,
    Reserved11,
    Reserved12,
    Reserved13,
    Reserved14,
    Ws2812Mode,
    Ws2812Trigger,
    Ws2812Length,
    Ws2812Speed,
    Ws2812Led0Data0,
    Ws2812Led0Data1,
    Ws2812Led0Data2,
    Ws2812Led0Data3,
    Ws2812Led1Data0,
    Ws2812Led1Data1,
    Ws2812Led1Data2,
    Ws2812Led1Data3,
    Ws2812Led2Data0,
    Ws2812Led2Data1,
    Ws2812Led2Data2,
    Ws2812Led2Data3,
    Ws2812Led3Data0,
    Ws2812Led3Data1,
    Ws2812Led3Data2,
    Ws2812Led3Data3,
    Ws2812Led4Data0,
    Ws2812Led4Data1,
    Ws2812Led4Data2,
    Ws2812Led4Data3,
    Ws2812Led5Data0,
    Ws2812Led5Data1,
    Ws2812Led5Data2,
    Ws2812Led5Data3,
    Ws2812Led6Data0,
    Ws2812Led6Data1,
    Ws2812Led6Data2,
    Ws2812Led6Data3,
    Ws2812Led7Data0,
    Ws2812Led7Data1,
    Ws2812Led7Data2,
    Ws2812Led7Data3,
    Ws2812Led8Data0,
    Ws2812Led8Data1,
    Ws2812Led8Data2,
    Ws2812Led8Data3,
    Ws2812Led9Data0,
    Ws2812Led9Data1,
    Ws2812Led9Data2,
    Ws2812Led9Data3,
    MscControl,
    MscState,
    Msc0BlockCountLoA,
    Msc0BlockCountLoB,
    Msc0BlockCountLoC,
    Msc0BlockCountHi,
    Msc0BlockSizeLo,
    Msc0BlockSizeHi,
    Msc1BlockCountLoA,
    Msc1BlockCountLoB,
    Msc1BlockCountLoC,
    Msc1BlockCountHi,
    Msc1BlockSizeLo,
    Msc1BlockSizeHi,
}

impl From<Rp2040Reg> for u8 {
    fn from(r: Rp2040Reg) -> Self { r as u8 }
}
